
ATMEGA32_LCD16_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000017a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001ce  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000200  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008ff  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005d5  00000000  00000000  00000b6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000359  00000000  00000000  00001140  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  0000149c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000038b  00000000  00000000  000014e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000005a  00000000  00000000  0000186b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000018c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 54 00 	call	0xa8	; 0xa8 <main>
  64:	0c 94 bb 00 	jmp	0x176	; 0x176 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <_Z14send_a_commandh>:
    }
}

void send_a_command (unsigned char command)
{
	PORTA=command;
  6c:	8b bb       	out	0x1b, r24	; 27
	PORTD&= ~(1<<RS);
  6e:	96 98       	cbi	0x12, 6	; 18
	PORTD|= (1<<E);
  70:	95 9a       	sbi	0x12, 5	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  72:	2f ef       	ldi	r18, 0xFF	; 255
  74:	80 e7       	ldi	r24, 0x70	; 112
  76:	92 e0       	ldi	r25, 0x02	; 2
  78:	21 50       	subi	r18, 0x01	; 1
  7a:	80 40       	sbci	r24, 0x00	; 0
  7c:	90 40       	sbci	r25, 0x00	; 0
  7e:	e1 f7       	brne	.-8      	; 0x78 <_Z14send_a_commandh+0xc>
  80:	00 c0       	rjmp	.+0      	; 0x82 <_Z14send_a_commandh+0x16>
  82:	00 00       	nop
	_delay_ms(50);
	PORTD&= ~(1<<E);
  84:	95 98       	cbi	0x12, 5	; 18
	PORTA =0;
  86:	1b ba       	out	0x1b, r1	; 27
  88:	08 95       	ret

0000008a <_Z16send_a_characterh>:
}

void send_a_character (unsigned char character)
{
	PORTA=character;
  8a:	8b bb       	out	0x1b, r24	; 27
	PORTD|= (1<<RS);
  8c:	96 9a       	sbi	0x12, 6	; 18
	PORTD|= (1<<E);
  8e:	95 9a       	sbi	0x12, 5	; 18
  90:	2f ef       	ldi	r18, 0xFF	; 255
  92:	80 e7       	ldi	r24, 0x70	; 112
  94:	92 e0       	ldi	r25, 0x02	; 2
  96:	21 50       	subi	r18, 0x01	; 1
  98:	80 40       	sbci	r24, 0x00	; 0
  9a:	90 40       	sbci	r25, 0x00	; 0
  9c:	e1 f7       	brne	.-8      	; 0x96 <_Z16send_a_characterh+0xc>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <_Z16send_a_characterh+0x16>
  a0:	00 00       	nop
	_delay_ms(50);
	PORTD&= ~(1<<E);
  a2:	95 98       	cbi	0x12, 5	; 18
	PORTA =0;
  a4:	1b ba       	out	0x1b, r1	; 27
  a6:	08 95       	ret

000000a8 <main>:
void send_a_command (unsigned char command);
void send_a_character(unsigned char character);

int main(void)
{
	DDRA = 0xFF;
  a8:	8f ef       	ldi	r24, 0xFF	; 255
  aa:	8a bb       	out	0x1a, r24	; 26
	DDRD = 0xFF;
  ac:	81 bb       	out	0x11, r24	; 17
  ae:	2f ef       	ldi	r18, 0xFF	; 255
  b0:	80 e7       	ldi	r24, 0x70	; 112
  b2:	92 e0       	ldi	r25, 0x02	; 2
  b4:	21 50       	subi	r18, 0x01	; 1
  b6:	80 40       	sbci	r24, 0x00	; 0
  b8:	90 40       	sbci	r25, 0x00	; 0
  ba:	e1 f7       	brne	.-8      	; 0xb4 <main+0xc>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <main+0x16>
  be:	00 00       	nop
	_delay_ms(50);
	send_a_command(0x01);// sending all clear command
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	0e 94 36 00 	call	0x6c	; 0x6c <_Z14send_a_commandh>
	send_a_command(0x38);// 16*2 line LCD
  c6:	88 e3       	ldi	r24, 0x38	; 56
  c8:	0e 94 36 00 	call	0x6c	; 0x6c <_Z14send_a_commandh>
	send_a_command(0x0c);// screen and cursor OFF  0x0e  0x0c  
  cc:	8c e0       	ldi	r24, 0x0C	; 12
  ce:	0e 94 36 00 	call	0x6c	; 0x6c <_Z14send_a_commandh>
	send_a_command(0x1c);//Shift complete data to right side
	send_a_command(0x14);//Cursor position shifts to right
	send_a_command(0x10);//Cursor position Shifts to left
	send_a_command(0x80);//Move cursor to the beginning of second line */

	send_a_command(0x14);//Cursor position shifts to right
  d2:	84 e1       	ldi	r24, 0x14	; 20
  d4:	0e 94 36 00 	call	0x6c	; 0x6c <_Z14send_a_commandh>
	send_a_command(0x14);//Cursor position shifts to right
  d8:	84 e1       	ldi	r24, 0x14	; 20
  da:	0e 94 36 00 	call	0x6c	; 0x6c <_Z14send_a_commandh>
		    
	send_a_character (0x48); // ASCII(American Standard Code for Information Interchange) code for 'H'
  de:	88 e4       	ldi	r24, 0x48	; 72
  e0:	0e 94 45 00 	call	0x8a	; 0x8a <_Z16send_a_characterh>
	send_a_character (0x65); // ASCII(American Standard Code for Information Interchange) code for 'e'
  e4:	85 e6       	ldi	r24, 0x65	; 101
  e6:	0e 94 45 00 	call	0x8a	; 0x8a <_Z16send_a_characterh>
	send_a_character (0x6C); // ASCII(American Standard Code for Information Interchange) code for 'l'
  ea:	8c e6       	ldi	r24, 0x6C	; 108
  ec:	0e 94 45 00 	call	0x8a	; 0x8a <_Z16send_a_characterh>
	send_a_character (0x6C); // ASCII(American Standard Code for Information Interchange) code for 'l'
  f0:	8c e6       	ldi	r24, 0x6C	; 108
  f2:	0e 94 45 00 	call	0x8a	; 0x8a <_Z16send_a_characterh>
	send_a_character (0x6f); // ASCII(American Standard Code for Information Interchange) code for 'o'
  f6:	8f e6       	ldi	r24, 0x6F	; 111
  f8:	0e 94 45 00 	call	0x8a	; 0x8a <_Z16send_a_characterh>
    send_a_character (0x20); // ASCII(American Standard Code for Information Interchange) code for ' '
  fc:	80 e2       	ldi	r24, 0x20	; 32
  fe:	0e 94 45 00 	call	0x8a	; 0x8a <_Z16send_a_characterh>
	send_a_character (0x57); // ASCII(American Standard Code for Information Interchange) code for 'w'
 102:	87 e5       	ldi	r24, 0x57	; 87
 104:	0e 94 45 00 	call	0x8a	; 0x8a <_Z16send_a_characterh>
	send_a_character (0x6f); // ASCII(American Standard Code for Information Interchange) code for 'o'
 108:	8f e6       	ldi	r24, 0x6F	; 111
 10a:	0e 94 45 00 	call	0x8a	; 0x8a <_Z16send_a_characterh>
	send_a_character (0x72); // ASCII(American Standard Code for Information Interchange) code for 'r'
 10e:	82 e7       	ldi	r24, 0x72	; 114
 110:	0e 94 45 00 	call	0x8a	; 0x8a <_Z16send_a_characterh>
	send_a_character (0x6C); // ASCII(American Standard Code for Information Interchange) code for 'l'
 114:	8c e6       	ldi	r24, 0x6C	; 108
 116:	0e 94 45 00 	call	0x8a	; 0x8a <_Z16send_a_characterh>
	send_a_character (0x64); // ASCII(American Standard Code for Information Interchange) code for 'd'
 11a:	84 e6       	ldi	r24, 0x64	; 100
 11c:	0e 94 45 00 	call	0x8a	; 0x8a <_Z16send_a_characterh>
	send_a_character (0x21); // ASCII(American Standard Code for Information Interchange) code for '!'
 120:	81 e2       	ldi	r24, 0x21	; 33
 122:	0e 94 45 00 	call	0x8a	; 0x8a <_Z16send_a_characterh>
	
	send_a_command(0xC0);//Move cursor to the beginning of second line 0x80
 126:	80 ec       	ldi	r24, 0xC0	; 192
 128:	0e 94 36 00 	call	0x6c	; 0x6c <_Z14send_a_commandh>
	
	send_a_command(0x14);//Cursor position shifts to right
 12c:	84 e1       	ldi	r24, 0x14	; 20
 12e:	0e 94 36 00 	call	0x6c	; 0x6c <_Z14send_a_commandh>
	send_a_command(0x14);//Cursor position shifts to right
 132:	84 e1       	ldi	r24, 0x14	; 20
 134:	0e 94 36 00 	call	0x6c	; 0x6c <_Z14send_a_commandh>
	
	send_a_character (0x48); // ASCII(American Standard Code for Information Interchange) code for 'H'
 138:	88 e4       	ldi	r24, 0x48	; 72
 13a:	0e 94 45 00 	call	0x8a	; 0x8a <_Z16send_a_characterh>
	send_a_character (0x6f); // ASCII(American Standard Code for Information Interchange) code for 'o'
 13e:	8f e6       	ldi	r24, 0x6F	; 111
 140:	0e 94 45 00 	call	0x8a	; 0x8a <_Z16send_a_characterh>
	send_a_character (0x6A); // ASCII(American Standard Code for Information Interchange) code for 'j'
 144:	8a e6       	ldi	r24, 0x6A	; 106
 146:	0e 94 45 00 	call	0x8a	; 0x8a <_Z16send_a_characterh>
	send_a_character (0x6A); // ASCII(American Standard Code for Information Interchange) code for 'j'
 14a:	8a e6       	ldi	r24, 0x6A	; 106
 14c:	0e 94 45 00 	call	0x8a	; 0x8a <_Z16send_a_characterh>
	send_a_character (0x61); // ASCII(American Standard Code for Information Interchange) code for 'a'
 150:	81 e6       	ldi	r24, 0x61	; 97
 152:	0e 94 45 00 	call	0x8a	; 0x8a <_Z16send_a_characterh>
	send_a_character (0x74); // ASCII(American Standard Code for Information Interchange) code for 't'
 156:	84 e7       	ldi	r24, 0x74	; 116
 158:	0e 94 45 00 	call	0x8a	; 0x8a <_Z16send_a_characterh>
	_delay_ms (1000);	
	send_a_command(0x01);// sending all clear command*/
	
	while (1) 
    {
		PORTD ^=(1<<PD7);
 15c:	82 b3       	in	r24, 0x12	; 18
 15e:	80 58       	subi	r24, 0x80	; 128
 160:	82 bb       	out	0x12, r24	; 18
 162:	2f ef       	ldi	r18, 0xFF	; 255
 164:	89 e6       	ldi	r24, 0x69	; 105
 166:	98 e1       	ldi	r25, 0x18	; 24
 168:	21 50       	subi	r18, 0x01	; 1
 16a:	80 40       	sbci	r24, 0x00	; 0
 16c:	90 40       	sbci	r25, 0x00	; 0
 16e:	e1 f7       	brne	.-8      	; 0x168 <main+0xc0>
 170:	00 c0       	rjmp	.+0      	; 0x172 <main+0xca>
 172:	00 00       	nop
 174:	f3 cf       	rjmp	.-26     	; 0x15c <main+0xb4>

00000176 <_exit>:
 176:	f8 94       	cli

00000178 <__stop_program>:
 178:	ff cf       	rjmp	.-2      	; 0x178 <__stop_program>
