
TX_RX_ATMEGA32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ee  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000142  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000142  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000174  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000061c  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000590  00000000  00000000  000007ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ef  00000000  00000000  00000d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000106c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000346  00000000  00000000  00001090  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  000013d6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 36       	cpi	r26, 0x60	; 96
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 75 00 	jmp	0xea	; 0xea <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:

volatile char Rec_Data;  

int main(void)
{
	DDRD |=(1<<PD7);
  7c:	8f 9a       	sbi	0x11, 7	; 17
	
	 DDRD  = 0X02;                    /* PD0(RX)-I/P, PD1(TX)-O/P                         */
  7e:	82 e0       	ldi	r24, 0x02	; 2
  80:	81 bb       	out	0x11, r24	; 17
	 UCSRA = 0X00;                    /* Clears TXC & RXC Flag Bit                        */
  82:	1b b8       	out	0x0b, r1	; 11
	 UCSRB |= (1<<TXEN)|(1<<RXEN);                    /* Transmission & Reception Enable (TXEN=1, RXEN=1) */
  84:	8a b1       	in	r24, 0x0a	; 10
  86:	88 61       	ori	r24, 0x18	; 24
  88:	8a b9       	out	0x0a, r24	; 10
	 UCSRC = 0X86;                    /* URSEL=1,UMSEL=0,UCSZ1=1,UCSZ0=0                  */
  8a:	86 e8       	ldi	r24, 0x86	; 134
  8c:	80 bd       	out	0x20, r24	; 32
	 UBRRL = 103;                      /* Serial Baudrate=9600                             */
  8e:	87 e6       	ldi	r24, 0x67	; 103
  90:	89 b9       	out	0x09, r24	; 9
	 UDR   = 'A';                     /* Transmit a charcter                              */
  92:	81 e4       	ldi	r24, 0x41	; 65
  94:	8c b9       	out	0x0c, r24	; 12
	 while((UCSRA & 0X20)!=0X20);     /* UDRE Flag Bit Check                              */
  96:	5d 9b       	sbis	0x0b, 5	; 11
  98:	fe cf       	rjmp	.-4      	; 0x96 <main+0x1a>
		PORTD ^=(1<<PD7);
		
/*
		while((UCSRA & 0X80)!=0X80);    / * RXC is set when unread data is in receive buffer * /
		Rec_Data=UDR;*/                   /* Store the received character                     */
		UDR = 'H'; //  Rec_Data              /* Transmit the received character                  */
  9a:	68 e4       	ldi	r22, 0x48	; 72
		while((UCSRA & 0X20)!=0X20);    /* Wait here till UDR is empty                      */
		UDR = 'o'; //  Rec_Data              /* Transmit the received character                  */
  9c:	5f e6       	ldi	r21, 0x6F	; 111
		while((UCSRA & 0X20)!=0X20);    /* Wait here till UDR is empty                      */
		UDR = 'j'; //  Rec_Data              /* Transmit the received character                  */
  9e:	9a e6       	ldi	r25, 0x6A	; 106
		while((UCSRA & 0X20)!=0X20);    /* Wait here till UDR is empty                      */
		UDR = 'j'; //  Rec_Data              /* Transmit the received character                  */
		while((UCSRA & 0X20)!=0X20);    /* Wait here till UDR is empty                      */
		UDR = 'a'; //  Rec_Data              /* Transmit the received character                  */
  a0:	41 e6       	ldi	r20, 0x61	; 97
		while((UCSRA & 0X20)!=0X20);    /* Wait here till UDR is empty                      */
		UDR = 't'; //  Rec_Data              /* Transmit the received character                  */
  a2:	34 e7       	ldi	r19, 0x74	; 116
		while((UCSRA & 0X20)!=0X20);    /* Wait here till UDR is empty                      */
		UDR = '\n';   //Rec_Data              /* Transmit the received character                  */
  a4:	2a e0       	ldi	r18, 0x0A	; 10
	 UDR   = 'A';                     /* Transmit a charcter                              */
	 while((UCSRA & 0X20)!=0X20);     /* UDRE Flag Bit Check                              */
		
    while (1) 
    {
		PORTD ^=(1<<PD7);
  a6:	82 b3       	in	r24, 0x12	; 18
  a8:	80 58       	subi	r24, 0x80	; 128
  aa:	82 bb       	out	0x12, r24	; 18
		
/*
		while((UCSRA & 0X80)!=0X80);    / * RXC is set when unread data is in receive buffer * /
		Rec_Data=UDR;*/                   /* Store the received character                     */
		UDR = 'H'; //  Rec_Data              /* Transmit the received character                  */
  ac:	6c b9       	out	0x0c, r22	; 12
		while((UCSRA & 0X20)!=0X20);    /* Wait here till UDR is empty                      */
  ae:	5d 9b       	sbis	0x0b, 5	; 11
  b0:	fe cf       	rjmp	.-4      	; 0xae <main+0x32>
		UDR = 'o'; //  Rec_Data              /* Transmit the received character                  */
  b2:	5c b9       	out	0x0c, r21	; 12
		while((UCSRA & 0X20)!=0X20);    /* Wait here till UDR is empty                      */
  b4:	5d 9b       	sbis	0x0b, 5	; 11
  b6:	fe cf       	rjmp	.-4      	; 0xb4 <main+0x38>
		UDR = 'j'; //  Rec_Data              /* Transmit the received character                  */
  b8:	9c b9       	out	0x0c, r25	; 12
		while((UCSRA & 0X20)!=0X20);    /* Wait here till UDR is empty                      */
  ba:	5d 9b       	sbis	0x0b, 5	; 11
  bc:	fe cf       	rjmp	.-4      	; 0xba <main+0x3e>
		UDR = 'j'; //  Rec_Data              /* Transmit the received character                  */
  be:	9c b9       	out	0x0c, r25	; 12
		while((UCSRA & 0X20)!=0X20);    /* Wait here till UDR is empty                      */
  c0:	5d 9b       	sbis	0x0b, 5	; 11
  c2:	fe cf       	rjmp	.-4      	; 0xc0 <main+0x44>
		UDR = 'a'; //  Rec_Data              /* Transmit the received character                  */
  c4:	4c b9       	out	0x0c, r20	; 12
		while((UCSRA & 0X20)!=0X20);    /* Wait here till UDR is empty                      */
  c6:	5d 9b       	sbis	0x0b, 5	; 11
  c8:	fe cf       	rjmp	.-4      	; 0xc6 <main+0x4a>
		UDR = 't'; //  Rec_Data              /* Transmit the received character                  */
  ca:	3c b9       	out	0x0c, r19	; 12
		while((UCSRA & 0X20)!=0X20);    /* Wait here till UDR is empty                      */
  cc:	5d 9b       	sbis	0x0b, 5	; 11
  ce:	fe cf       	rjmp	.-4      	; 0xcc <main+0x50>
		UDR = '\n';   //Rec_Data              /* Transmit the received character                  */
  d0:	2c b9       	out	0x0c, r18	; 12
		while((UCSRA & 0X20)!=0X20);    /* Wait here till UDR is empty                      */
  d2:	5d 9b       	sbis	0x0b, 5	; 11
  d4:	fe cf       	rjmp	.-4      	; 0xd2 <main+0x56>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d6:	7f ef       	ldi	r23, 0xFF	; 255
  d8:	89 e6       	ldi	r24, 0x69	; 105
  da:	e8 e1       	ldi	r30, 0x18	; 24
  dc:	71 50       	subi	r23, 0x01	; 1
  de:	80 40       	sbci	r24, 0x00	; 0
  e0:	e0 40       	sbci	r30, 0x00	; 0
  e2:	e1 f7       	brne	.-8      	; 0xdc <main+0x60>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <main+0x6a>
  e6:	00 00       	nop
  e8:	de cf       	rjmp	.-68     	; 0xa6 <main+0x2a>

000000ea <_exit>:
  ea:	f8 94       	cli

000000ec <__stop_program>:
  ec:	ff cf       	rjmp	.-2      	; 0xec <__stop_program>
