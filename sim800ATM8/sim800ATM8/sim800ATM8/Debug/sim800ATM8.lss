
sim800ATM8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000013e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000064  00800060  0000013e  000001b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000216  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000248  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008f3  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ac  00000000  00000000  00000bcf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003ea  00000000  00000000  0000127b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000110  00000000  00000000  00001668  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000460  00000000  00000000  00001778  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000402  00000000  00000000  00001bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00001fda  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	46 c0       	rjmp	.+140    	; 0x90 <__vector_1>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ee e3       	ldi	r30, 0x3E	; 62
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a4 3c       	cpi	r26, 0xC4	; 196
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a4 ec       	ldi	r26, 0xC4	; 196
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a4 3c       	cpi	r26, 0xC4	; 196
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	4b d0       	rcall	.+150    	; 0xf0 <main>
  5a:	6f c0       	rjmp	.+222    	; 0x13a <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <_Z12uart_putcharh>:
	{
		z = uart_getchar();
		if ((z==0xFF) && (i != 0)){TCCR0=0;return i;}
		if (i<len_buffer/* && z!=13 && z!=10*/){buffer_data[i] = z;i++;}
	}
}
  5e:	5d 9b       	sbis	0x0b, 5	; 11
  60:	fe cf       	rjmp	.-4      	; 0x5e <_Z12uart_putcharh>
  62:	8c b9       	out	0x0c, r24	; 12
  64:	08 95       	ret

00000066 <_Z15uart_put_stringPcc>:
  66:	1f 93       	push	r17
  68:	cf 93       	push	r28
  6a:	df 93       	push	r29
  6c:	ec 01       	movw	r28, r24
  6e:	16 2f       	mov	r17, r22
  70:	88 81       	ld	r24, Y
  72:	88 23       	and	r24, r24
  74:	29 f0       	breq	.+10     	; 0x80 <_Z15uart_put_stringPcc+0x1a>
  76:	21 96       	adiw	r28, 0x01	; 1
  78:	f2 df       	rcall	.-28     	; 0x5e <_Z12uart_putcharh>
  7a:	89 91       	ld	r24, Y+
  7c:	81 11       	cpse	r24, r1
  7e:	fc cf       	rjmp	.-8      	; 0x78 <_Z15uart_put_stringPcc+0x12>
  80:	11 23       	and	r17, r17
  82:	11 f0       	breq	.+4      	; 0x88 <_Z15uart_put_stringPcc+0x22>
  84:	8d e0       	ldi	r24, 0x0D	; 13
  86:	eb df       	rcall	.-42     	; 0x5e <_Z12uart_putcharh>
  88:	df 91       	pop	r29
  8a:	cf 91       	pop	r28
  8c:	1f 91       	pop	r17
  8e:	08 95       	ret

00000090 <__vector_1>:

ISR(INT0_vect)
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	2f 93       	push	r18
  9c:	3f 93       	push	r19
  9e:	4f 93       	push	r20
  a0:	5f 93       	push	r21
  a2:	6f 93       	push	r22
  a4:	7f 93       	push	r23
  a6:	8f 93       	push	r24
  a8:	9f 93       	push	r25
  aa:	af 93       	push	r26
  ac:	bf 93       	push	r27
  ae:	ef 93       	push	r30
  b0:	ff 93       	push	r31
	PORTB |=(1<<PB0);
  b2:	c0 9a       	sbi	0x18, 0	; 24
	uart_put_string (StrBuff, 1);
  b4:	61 e0       	ldi	r22, 0x01	; 1
  b6:	80 e6       	ldi	r24, 0x60	; 96
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	d5 df       	rcall	.-86     	; 0x66 <_Z15uart_put_stringPcc>
}
  bc:	ff 91       	pop	r31
  be:	ef 91       	pop	r30
  c0:	bf 91       	pop	r27
  c2:	af 91       	pop	r26
  c4:	9f 91       	pop	r25
  c6:	8f 91       	pop	r24
  c8:	7f 91       	pop	r23
  ca:	6f 91       	pop	r22
  cc:	5f 91       	pop	r21
  ce:	4f 91       	pop	r20
  d0:	3f 91       	pop	r19
  d2:	2f 91       	pop	r18
  d4:	0f 90       	pop	r0
  d6:	0f be       	out	0x3f, r0	; 63
  d8:	0f 90       	pop	r0
  da:	1f 90       	pop	r1
  dc:	18 95       	reti

000000de <_Z11serial_initv>:
	while(gsm.recive==DISABLE){cu++;_delay_ms(10);if(cu>400){break;}}
	gsm.recive = DISABLE;
}*/

void serial_init(){
	UCSRB = (1 << RXEN ) | (1 << TXEN );
  de:	88 e1       	ldi	r24, 0x18	; 24
  e0:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << URSEL ) | (1 << UCSZ0 ) | (1 << UCSZ1 );
  e2:	86 e8       	ldi	r24, 0x86	; 134
  e4:	80 bd       	out	0x20, r24	; 32
	UBRRH = ( BAUD_PRESCALE >> 8);
  e6:	10 bc       	out	0x20, r1	; 32
	UBRRL = BAUD_PRESCALE ;
  e8:	87 e6       	ldi	r24, 0x67	; 103
  ea:	89 b9       	out	0x09, r24	; 9
	UCSRB |= (1 << RXCIE );
  ec:	57 9a       	sbi	0x0a, 7	; 10
  ee:	08 95       	ret

000000f0 <main>:
// }


int main(void)
{
	GICR|=(1<<INT0);//|(1<<INT1)
  f0:	8b b7       	in	r24, 0x3b	; 59
  f2:	80 64       	ori	r24, 0x40	; 64
  f4:	8b bf       	out	0x3b, r24	; 59
	
	MCUCR|=(1<<ISC01);//(1<<ISC00)|
  f6:	85 b7       	in	r24, 0x35	; 53
  f8:	82 60       	ori	r24, 0x02	; 2
  fa:	85 bf       	out	0x35, r24	; 53
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fc:	2f ef       	ldi	r18, 0xFF	; 255
  fe:	87 e8       	ldi	r24, 0x87	; 135
 100:	93 e1       	ldi	r25, 0x13	; 19
 102:	21 50       	subi	r18, 0x01	; 1
 104:	80 40       	sbci	r24, 0x00	; 0
 106:	90 40       	sbci	r25, 0x00	; 0
 108:	e1 f7       	brne	.-8      	; 0x102 <main+0x12>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <main+0x1c>
 10c:	00 00       	nop
	
	_delay_ms(400);
	
	serial_init();
 10e:	e7 df       	rcall	.-50     	; 0xde <_Z11serial_initv>
	DDRB |=(1<<PB0);
 110:	b8 9a       	sbi	0x17, 0	; 23
 112:	2f ef       	ldi	r18, 0xFF	; 255
 114:	87 e8       	ldi	r24, 0x87	; 135
 116:	93 e1       	ldi	r25, 0x13	; 19
 118:	21 50       	subi	r18, 0x01	; 1
 11a:	80 40       	sbci	r24, 0x00	; 0
 11c:	90 40       	sbci	r25, 0x00	; 0
 11e:	e1 f7       	brne	.-8      	; 0x118 <main+0x28>
 120:	00 c0       	rjmp	.+0      	; 0x122 <main+0x32>
 122:	00 00       	nop
// 	uart_put_string("ATD",0);
// 	uart_put_string(StrBuff,1);
// 	wait_flage();
	_delay_ms(400);
	//uart_put_string (StrBuff, 1);
	sei ();
 124:	78 94       	sei
 126:	2f ef       	ldi	r18, 0xFF	; 255
 128:	89 e6       	ldi	r24, 0x69	; 105
 12a:	98 e1       	ldi	r25, 0x18	; 24
 12c:	21 50       	subi	r18, 0x01	; 1
 12e:	80 40       	sbci	r24, 0x00	; 0
 130:	90 40       	sbci	r25, 0x00	; 0
 132:	e1 f7       	brne	.-8      	; 0x12c <main+0x3c>
 134:	00 c0       	rjmp	.+0      	; 0x136 <main+0x46>
 136:	00 00       	nop
 138:	f6 cf       	rjmp	.-20     	; 0x126 <main+0x36>

0000013a <_exit>:
 13a:	f8 94       	cli

0000013c <__stop_program>:
 13c:	ff cf       	rjmp	.-2      	; 0x13c <__stop_program>
